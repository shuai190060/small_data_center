
- hosts: localhost
  become: false 
  gather_facts: false 
  tags: 
          - test 
  tasks:
    # get the server1 private ip
    - name: Get Server 1 Private IP from Terraform Output
      shell: terraform output -json server_ips | jq -r '.server_1.private_ip'
      register: server_1_private_ip
      delegate_to: localhost
      become: false

    - name: Set Fact for Server 1 Private IP
      set_fact:
        server_1_private_ip: "{{ server_1_private_ip.stdout }}"
    - name: Print Server 1 Private IP
      debug:
        msg: "Server 1 Private IP is: {{ server_1_private_ip }}"
    # get the server2 private ip
    - name: Get Server 2 Private IP from Terraform Output
      shell: terraform output -json server_ips | jq -r '.server_2.private_ip'
      register: server_2_private_ip
      delegate_to: localhost
      become: false

    - name: Set Fact for Server 2 Private IP
      set_fact:
        server_2_private_ip: "{{ server_2_private_ip.stdout }}"
    - name: Print Server 2 Private IP
      debug:
        msg: "Server 2 Private IP is: {{ server_2_private_ip }}"
    # get the load balancer node's private IP
    # get the server2 private ip
    - name: Get haproxy Private IP from Terraform Output
      shell: terraform output -json  | jq -r '.load_balancer_private.value'
      register: haproxy_server_ip
      delegate_to: localhost
      become: false

    - name: Set Fact for haproxy server Private IP
      set_fact:
        haproxy_server_ip: "{{ haproxy_server_ip.stdout }}"
    - name: Print haproxy server Private IP
      debug:
        msg: "HAproxy IP is: {{ haproxy_server_ip }}"
 



- name: provision mini data center 
  hosts: all
  become: true
  vars:
    db_password_file: "../credential/postgres.txt"
    db_name: "account"
    postgres_bin: "/usr/lib/postgresql/15/bin"
    server_1_ip: "{{ hostvars['localhost']['server_1_private_ip'] }}"
    server_2_ip: "{{ hostvars['localhost']['server_2_private_ip'] }}"
    haproxy_server_ip: "{{ hostvars['localhost']['haproxy_server_ip'] }}"
  environment:
    PATH: "{{ postgres_bin }}:{{ ansible_env.PATH }}"
  
  handlers:
    # - name: reload postgres
    #   when: 
    #     - "'primary_server' in  group_names or 'replicas' in group_names"
    #   shell: 
    #     cmd: "sudo su - postgres /usr/lib/postgresql/15/bin/pg_ctl -D /tmp/db restart"

  tasks:

#--------------------------------------------------------------------------------------
# primary database
#--------------------------------------------------------------------------------------
    - name: provision primary postgresql server 
      when: 
        - "'primary_server' in  group_names"
      block:
        - name: Import the repository signing key
          apt_key:
            url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
            state: present
        
        - name: Add repository
          apt_repository:
            repo: deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main
            state: present
            update_cache: yes
        - name: update the apt 
          apt:
            update_cache: yes

        - name: install postgresql
          apt: 
            name: 
            - acl 
            - postgresql-15
            - postgresql-client-15
            state: present
        - name: create /tmp/db directory
          file:
            path: /tmp/db
            state: directory
            owner: postgres
            group: postgres
            mode: "0700" # has to be 0700
        - name: initdb 
          command: 
            cmd: sudo -u postgres /usr/lib/postgresql/15/bin/initdb -D /tmp/db
            creates: /tmp/db/PG_VERSION

        - name: fetch the postgresql.conf file
          fetch:
            src: /tmp/db/postgresql.conf
            dest: ../config/postgresql.conf
            flat: yes 

        - name: kill all the 5432 port consumer on the server 
          shell: |
            pid=$(sudo lsof -t -i :5432)
            if [ -n "$pid" ]; then
              sudo kill -9 $pid
            fi
        - name: Provision postgres Configuration
          template:
            src: ../config/postgresql.conf.j2
            dest: /tmp/db/postgresql.conf # populate to the postgresql config folder
          # notify: reload postgres
          changed_when: true 

        - name: reload postgres
          command: "/usr/lib/postgresql/15/bin/pg_ctl -D /tmp/db restart"
          become_user: postgres

        - name: Add the extention
          shell: sudo -u postgres psql -p 5432  -c "create extension pg_stat_statements;"
          ignore_errors: true

        # create replication user repuser
        - name: Check if replication user "repuser" exists
          shell: "sudo -u postgres psql -p 5432 -tAc \"SELECT 1 FROM pg_roles WHERE rolname='repuser';\""
          register: repuser_exists
          ignore_errors: true 
        - name: create replication user "repuser"
          shell: sudo -u postgres psql -p 5432  -c "create user repuser replication;"
          when: repuser_exists.stdout == ""
  
        # create password and database
        - name: set the password for repuser 
          shell: sudo -u postgres psql -c "ALTER USER repuser WITH PASSWORD '{{ lookup('file', db_password_file) | trim }}';"
        - name: set the password
          shell: sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '{{ lookup('file', db_password_file) | trim }}';"

        - name: Check if "account" database exists
          shell: sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='{{ db_name }}';"
          register: db_exists
          ignore_errors: true
        - name: create database "account"
          shell: sudo -u postgres psql -c "CREATE DATABASE {{ db_name }};"
          when: db_exists.stdout == ""
        # only to fetch the pg_hba.conf file to local
        - name: fetch the postgresql.conf file
          fetch:
            src: /tmp/db/pg_hba.conf
            dest: ../config/pg_hba.conf
            flat: yes 
        - name: Provision postgres pg_hba.conf 
          template:
            src: ../config/pg_hba.conf.j2
            dest: /tmp/db/pg_hba.conf 
          changed_when: true 
        - name: reload postgres
          command: "/usr/lib/postgresql/15/bin/pg_ctl -D /tmp/db restart"
          become_user: postgres
#--------------------------------------------------------------------------------------
# replica database
#--------------------------------------------------------------------------------------
    - name: provision the replicas server
      when: 
          - "'replicas' in  group_names"
      block:
        - name: set PATH 
          shell: echo 'export PATH="/usr/lib/postgresql/15/bin:$PATH"' >> ~/.bashrc
        - name: Import the repository signing key
          apt_key:
            url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
            state: present
        
        - name: Add repository
          apt_repository:
            repo: deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main
            state: present
            update_cache: yes
        - name: update the apt 
          apt:
            update_cache: yes

        - name: install postgresql
          apt: 
            name: 
            - acl 
            - postgresql-15
            - postgresql-client-15
            state: present
        - name: create /tmp/db directory
          file:
            path: /tmp/db
            state: directory
            owner: postgres
            group: postgres
            mode: "0700"
        - name: initdb 
          command: 
            cmd: sudo -u postgres /usr/lib/postgresql/15/bin/initdb -D /tmp/db
            creates: /tmp/db/PG_VERSION
        
        - name: set the password
          shell: sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '{{ lookup('file', db_password_file) | trim }}';"
        - name: Check if "account" database exists
          shell: sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='account';"
          register: db_exists
          ignore_errors: true
        - name: create database "account"
          shell: sudo -u postgres psql -c "CREATE DATABASE {{ db_name }};"
          when: db_exists.stdout == ""
        
        # connect to host as replicas, and save file to /tmp/replica_db_1
        - name: Ensure data directory is empty
          command: rm -rf /tmp/replica_db/*
          become_user: postgres

        - name: Ensure data directory exists
          file:
            path: "/tmp/replica_db"
            state: directory
            owner: postgres
            group: postgres
            mode: '0700'
          become_user: postgres
        # REPLICAS_1 
        - name: init the replicas 
          when: inventory_hostname == "server_1"
          shell: 
            cmd: pg_basebackup -h 10.3.0.151 -U repuser --checkpoint=fast -D /tmp/replica_db_1/ -R --slot=server1 -C --port=5432
            creates: /tmp/replica_db_1/standby.signal
          become_user: postgres
        - name: Provision postgres pg_hba.conf for server1 
          template:
            src: ../config/pg_hba.conf.j2
            dest: /tmp/replica_db_1/pg_hba.conf 
          changed_when: true 

        - name: kill all the 5432 port consumer on the server 
          when: inventory_hostname == "server_1"
          shell: |
            pid=$(sudo lsof -t -i :5432)
            if [ -n "$pid" ]; then
              sudo kill -9 $pid
            fi

        - name: reload postgres
          when: inventory_hostname == "server_1"
          command: "/usr/lib/postgresql/15/bin/pg_ctl -D /tmp/replica_db_1 start"
          become_user: postgres

        # REPLICAS_2 
        - name: init the replicas 
          when: inventory_hostname == "server_2"
          shell: 
            cmd: pg_basebackup -h 10.3.0.151 -U repuser --checkpoint=fast -D /tmp/replica_db_2/ -R --slot=server2 -C --port=5432
            creates: /tmp/replica_db_2/standby.signal
          become_user: postgres
        - name: Provision postgres pg_hba.conf 
          template:
            src: ../config/pg_hba.conf.j2
            dest: /tmp/replica_db_2/pg_hba.conf 
          changed_when: true 

        - name: kill all the 5432 port consumer on the server 
          when: inventory_hostname == "server_2"
          shell: |
            pid=$(sudo lsof -t -i :5432)
            if [ -n "$pid" ]; then
              sudo kill -9 $pid
            fi

        - name: reload postgres
          when: inventory_hostname == "server_2"
          command: "/usr/lib/postgresql/15/bin/pg_ctl -D /tmp/replica_db_2 start"
          become_user: postgres

#--------------------------------------------------------------------------------------
# load balancer
#--------------------------------------------------------------------------------------
    - name: provision the haproxy for the replicas
      tags: 
      - test 
      when: 
          - "'load_balancer' in  group_names"
      block:
        - name: Import the repository signing key
          apt_key:
            url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
            state: present
        
        - name: Add repository
          apt_repository:
            repo: deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main
            state: present
            update_cache: yes
        - name: update the apt 
          apt:
            update_cache: yes

        - name: install haproxy
          apt:
            name:
              - haproxy
              - postgresql-15
              - postgresql-client-15
            state: present
            update_cache: true 
        - name: fetch the haproxy.cfg file
          fetch:
            src: /etc/haproxy/haproxy.cfg
            dest: ../config/haproxy.cfg
            flat: yes 
        - name: Provision haproxy.cfg file in the server 
          template:
            src: ../config/haproxy.cfg.j2
            dest: /etc/haproxy/haproxy.cfg 
          changed_when: true 
        - name: restart the haproxy server
          service:
            name: haproxy
            state: restarted 

#--------------------------------------------------------------------------------------
# pgbouncer server
#--------------------------------------------------------------------------------------